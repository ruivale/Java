/////////////////////////////////////////////////////////////////////////////////////
//  Links:
//      https://learn.microsoft.com/en-us/aspnet/core/grpc/json-transcoding?view=aspnetcore-8.0
//      https://www.infoq.com/articles/dotnet-grpc-json-transcoding/
//      https://learn.microsoft.com/en-us/aspnet/core/grpc/json-transcoding-binding
//      https://learn.microsoft.com/en-us/aspnet/core/grpc/json-transcoding-openapi?view=aspnetcore-8.0
//      https://learn.microsoft.com/en-us/aspnet/core/grpc/aspnetcore?view=aspnetcore-8.0
//      https://cloud.google.com/endpoints/docs/grpc/transcoding
//      https://cloud.google.com/apis/design/naming_convention
//
/////////////////////////////////////////////////////////////////////////////////////

syntax = "proto3";
package proto;

option csharp_namespace = "Com.Efacec.ES.TRP.Efarail.Cctv.Grpc.Configuration.v1";
option java_package = "com.efacec.es.trp.efarail.cctv.grpc.configuration.v1";

import "cctv_enums.proto";
import "cctv_messages.proto";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";


////////////////////////////////////////////////////////////////////////////////////
//
// CCTV configuration interface (TAO IDL: configuration.idl)
//
//
service Configuration {

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // Generic interfaces
  //

  //
  // Used to obtain all the network data: agent, stations, equipment classes, equipment types and equipments.
  // If the given ListIds has no ids set, it means all configured agent information should be returned.
  //
  // NOTE: THIS IS NOT RELATED WITH THE GUI/GI STV DATABASE TABLES (T_IG_*).
  //
  // TAO IDL:
  //          - int getAgentConfigByID(int ID, AgentConfigStv_Holder, listStationsHolder, listEquipClassesHolder, listEquipTypesConfHolder, listEquipsConfHolder, lastUpdated);
  rpc GetAgentNetworkConfigById(ListIds) returns (CctvConfigResponse);


  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // Equipments interfaces
  //

  //
  // Returns
  // TAO IDL:
  //          - ??????? int getAllEquipsConf(int stationId, listEquipsConfHolder lEquips); ??????
  // TODO: probably will required MORE developments in StvSa. There's no such API as "getAllEquips(..)"'
  rpc GetAllEquipments(ListIds) returns (ListEquipmentsResponse);

  //
  // Used to obtain cameras presets.
  // TAO IDL:
  //          - int getAllPresets(int cameraId, listPresetsHolder);
  rpc GetCamerasPresets(CamerasPresetsRequest) returns (CamerasPresetsResponse);

  //
  // Used to edit a cameras preset.
  //
  // NOTE: THIS METHOD WILL ONLY CHANGE THE STV DATABASE CAMERA PRESET DATA (it will not change anything in the equipment).
  //
  // TAO IDL:
  //          - int storePreset(PresetConfigStv_);
  rpc CamerasPresetsEdition(CamerasPresetsEditionRequest) returns (CamerasPresetsEditionResponse);



  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // Sequences interfaces
  //

  //
  // Obtain ALL configured sequences in the system.
  // If the given ListIds is empty, or null, this method returns ALL sequences basic data otherwise,
  // it filters the result by ListIds identifications which relates to sequences identifications.
  // TAO IDL:
  //          - int getAllVidSeqs(listVidSeqsHolder);
  //          - getVidSeqByID(VidSeqID, VideoSequenceConfigStv);
  rpc GetAllSequences(ListIds) returns (ListSequencesResponse);

  //
  // Used to add, basic and full edition, delete sequences and also edit and delete specific sequences operations (this last two must already exist).
  // TAO IDL:
  //          - int addNewVidSeq(workstationInformation_, VideoSequenceConfigStv_); (SequenceConfig.SEQCONF_ADD)
  //          - int saveVidSeq(workstationInformation_, VideoSequenceConfigStv_ ); (SequenceConfig.SEQCONF_EDIT_BASIC)
  //          - int saveVidSeqFull(workstationInformation_, VideoSequenceConfigStv_, VidSeqOperationConfigStv_[]); (SequenceConfig.SEQCONF_EDIT_FULL)
  //          - int deleteVidSeq(workstationInformation_ logInfo, int VidSeqID); (SequenceConfig.SEQCONF_DELETE)
  //          - int saveVidSeqOperation(VidSeqOperationConfigStv_); (SequenceConfig.SEQCONF_SAVE_OPERATION)
  //          - int deleteVidSeqOperation(int VidSeqID, int nPos); (SequenceConfig.SEQCONF_DELETE_OPERATION)
  rpc ExecSequenceConfiguration(SequenceConfigRequest) returns (SequenceConfigResponse);

  //
  // Obtains, for the given sequences, its list of operations.
  // TAO IDL:
  //          - int getAllVidSeqOperations(int vidSeqId, listVidSeqOpersHolder);
  rpc GetSequencesConfiguration(ListIds) returns (ListSequenceFullDataResponse);

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // Macros interfaces
  //

  //
  // Obtain ALL configured macros in the system.
  // Returns macros basic data (not its actions and parameters); for this, use the GetMacrosConfiguration(..) API.
  // If the given ListIds is empty, or null, this method returns ALL macros otherwise, it filters
  // the results using ListIds configured identifications which relates to the macro owner identification.
  // TAO IDL:
  //          - int getAllMacros(listMacrosHolder);
  //          - int getAllMacrosFromUser(int userId, listMacrosHolder);
  rpc GetAllMacros(ListIds) returns (ListMacrosResponse);

  //
  // Obtains macros configurations: macros, its actions and its actions parameters.
  // It can be filtered by setting the request macro or owner id. If not set, or invalid, all macros are returned.
  // TAO IDL:
  //          - int getMacroByID(int MacroID, MacroConfigStv_Holder);
  //          - int getAllMacros(listMacrosHolder);
  //          - int getAllMacrosFromUser(int userId, listMacrosHolder);
  rpc GetMacrosConfiguration(MacrosRequest) returns (ListMacrosFullDataResponse);

  //
  // From the given MacroActionParametersRequest, we can filter the returning data according to the given macro action parameter index.
  // If no parameter index is given, all the macro action parameters are returned, otherwise, only the desired parameter, if exists, is returned.
  // TAOL IDL:
  //          - int getAllActionParameters(int macroId, int actionNr, listActionParametersHolder );
  rpc GetMacroActionParameters(MacroActionParametersRequest) returns (ListMacroActionParameterResponse);

  //
  // Used to obtain macros actions.
  // TAO IDL:
  //          - int getAllActions(int MacroId, listActionsHolder lActions);
  rpc GetMacroActions(MacroActionsRequest) returns (ListMacroActionsResponse);

  //
  // Used to configure macro actions.
  // If the configuration operation is a save and the MacroActionConfigurationRequest.MacroActionFullData has the
  // macroActionParameters list set, then the save is considered a FULL macro action save.
  // For a deletion only the macro identification and its action index are required.
  // TAO IDL:
  //          - int saveAction(ActionConfigStv_ Action);
  //          - int deleteAction(int MacroID, int nActionNr);
  //          - int saveActionFull(ActionConfigStv_, ActionParameterConfigStv_[]);
  rpc ExecMacroActionConfiguration(MacroActionConfigurationRequest) returns (MacroActionConfigurationResponse);

  //
  // Used to configure macros.
  // If the configuration operation is a save and the MacroActionConfigurationRequest has all its data holders set, i.e.,
  // MacroFullData[.MacroActionFullData[.MacroActionParameter]], then we're' dealing with a FULL macro action save.
  // For a deletion only the macro identification is required.
  // TAO IDL:
  //          - int addNewMacro(workstationInformation_, MacroConfigStv_);
  //          - int saveMacro(workstationInformation_, MacroConfigStv_ );
  //          - int saveMacroFull(workstationInformation_, MacroConfigStv_, ActionConfigStv_[], ActionParameterConfigStv_[]);
  //          - int deleteMacro(workstationInformation_, MacroID);
  rpc ExecMacroConfiguration(MacroConfigurationRequest) returns (MacroConfigurationResponse);

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // Timer scheduled, equipment and system events reaction configurations
  //

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //
  // Equipment events reaction configurations
  // TAO IDL:
  //          - int getAllEvents(listEventConfigStvHolder); // for equipments and system events
  rpc GetEquipmentEventReactions(WorkstationInformation) returns (EquipmentEventReactionsResponse);

  //
  // Configure equipment event reactions.
  // TAO IDL:
  //          - int addNewEvent(EventConfigStv_); // for equipments and system events (returns the new evt id)
  //          - int saveEvent(EventConfigStv_); // for equipments and system events
  //          - int deleteEvent(int eventId);
  rpc ExecEquipmentEventReactionsConfiguration(EquipmentEventReactionsConfigurationRequest) returns (EquipmentEventReactionsConfigurationResponse);


  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //
  // System events reaction configurations
  // TAO IDL:
  //          - int getAllEvents(listEventConfigStvHolder); // for equipments and system events
  rpc GetSystemEventReactions(WorkstationInformation) returns (SystemEventReactionsResponse);

  //
  // Configure system event reactions.
  // TAO IDL:
  //          - int addNewEvent(EventConfigStv_); // for equipments and system events (returns the new evt id)
  //          - int saveEvent(EventConfigStv_); // for equipments and system events
  //          - int deleteEvent(int eventId);
  rpc ExecSystemEventReactionsConfiguration(SystemEventReactionsConfigurationRequest) returns (SystemEventReactionsConfigurationResponse);


  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //
  // Timer scheduled events reaction configurations
  // TAO IDL:
  //          - 	int getAllScheduledActions(listScheduledActionConfigStvHolder); // for timer scheduled events
  rpc GetTimerScheduledEventReactions(WorkstationInformation) returns (TimerScheduledEventReactionsResponse);

  //
  // Configure scheduled event reactions.
  // TAO IDL:
  //          - int saveScheduledAction(ScheduledActionConfigStv_); // for timer scheduled events
  //          - int deleteEvent(int eventId);
  rpc ExecTimerScheduledEventReactionsConfiguration(TimerScheduledEventReactionsConfigurationRequest) returns (TimerScheduledEventReactionsConfigurationResponse);

}