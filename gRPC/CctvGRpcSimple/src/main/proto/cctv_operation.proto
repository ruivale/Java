/////////////////////////////////////////////////////////////////////////////////////
//  Links:
//      https://learn.microsoft.com/en-us/aspnet/core/grpc/json-transcoding?view=aspnetcore-8.0
//      https://www.infoq.com/articles/dotnet-grpc-json-transcoding/
//      https://learn.microsoft.com/en-us/aspnet/core/grpc/json-transcoding-binding
//      https://learn.microsoft.com/en-us/aspnet/core/grpc/json-transcoding-openapi?view=aspnetcore-8.0
//      https://learn.microsoft.com/en-us/aspnet/core/grpc/aspnetcore?view=aspnetcore-8.0
//      https://cloud.google.com/endpoints/docs/grpc/transcoding
//      https://cloud.google.com/apis/design/naming_convention
//
/////////////////////////////////////////////////////////////////////////////////////

syntax = "proto3";
package proto;

option csharp_namespace = "Com.Efacec.ES.TRP.Efarail.Cctv.Grpc.Operation.v1";
option java_package = "com.efacec.es.trp.efarail.cctv.grpc.operation.v1";

import "cctv_messages.proto";

////////////////////////////////////////////////////////////////////////////////////
//
// CCTV operation interface (TAO IDL: operation.idl)
//
//
service Operation {

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // Generic operations
  //

  //
  // Signals the CCTV service an user just logged in or out.
  // TAO IDL:
  //          - void userAccess(short type, int userId);
  rpc UserAccess(UserAccessRequest) returns (Response);

  // Obtain the Operation service version
  // TAO IDL:
  //          - void getAgentVersions(...);
  //          - void getStvSaVersion(...);
  rpc GetVersions(VersionsRequest) returns (ListCctvVersionsResponse);

  // Obtains the given targets connection information, if any.
  // TAO IDL:
  //          - int getSourcesInTargets(int[] targets, ...);
  rpc GetDetailedConnectionsInfo(ListIds) returns (DetailedConnectionsInfoResponse);

  // Setting connections between source equipments, normally cameras, and targets, normally monitors.
  // NOTE: if the globalResponse, present in the returned MultipleRequestsResponse,
  //       is OK, there's no need to use the specific target response item.
  // TAO IDL:
  //          - int setSourceinTarget(...);
  rpc Connect(ConnectionsRequest) returns (MultipleRequestsResponse);

  // Disconnects all the given targets. Returns a list of results for each given target.
  // NOTE: if the globalResponse, present in the returned MultipleRequestsResponse,
  //       is OK, there's no need to use the specific target response item.
  // TAO IDL:
  //          - int disconnectVideoFromTarget(workstationInformation_ logInfo, int targetId);
  //          - int disconnectVideoFromTargetEx(workstationInformation_ logInfo, int[] targetIds, ...);
  //          or w/ source id set to -1 (i.e., invalid id):
  //          - int setSourceinTarget(workstationInformation_ logInfo, -1, int TargetID, 1, 1);
  rpc Disconnect(ListIds) returns (MultipleRequestsResponse);

  //
  // Obtain ALL active alarms.
  // TAO IDL:
  //          - void getAlarms(...);
  rpc GetAlarms(WorkstationInformation) returns (ListAlarmsResponse);

  //
  // Normally used to acknowledge sensors and actuators alarms.
  // TAO IDL:
  //          - int ackAlarm(workstationInformation_ logInfo, int nEquipId, int[] listAlarmIds, ...);
  rpc AckAlarms(AckAlarmsRequest) returns (MultipleRequestsResponse);

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // Groups of monitor, aka, alarm stack.

  //
  // Method used to acknowledge alarms in the alarms monitor list.
  // TAO IDL:
  //          - int acknowledgeAlarms(workstationInformation_ logInfo, long[] ackAlarms, listNotAckAlarmsHolder alarms);
  rpc AcknowledgeAlarmsInAlarmStack(ListIds) returns (AcknowledgeAlarmsResponse);

  //
  // Returns all NotAcknowledgedAlarms. Related w/ groups of monitors.
  // TAO IDL:
  //          - int getNotAckAlarms(...);
  rpc GetNotAcknowledgedAlarmsInAlarmStack(WorkstationInformation) returns (AcknowledgeAlarmsResponse);

  //
  // Used to set a NotAcknowledgedAlarm in a monitor.
  // For each given monitor:
  //      - if it belongs to a group of monitors, the alarm is set in it, moving the active alarm in that
  //        same monitor, if present, to another position in the stack. This does NOT ACKNOWLEDGE the alarm.
  //      - if it doesn't belong to a group of monitor, i.e., if it's a normal monitor, the alarm is set in
  //        it and the alarm is ACKNOWLEDGED!
  //
  // TAO IDL:
  //          For a group monitor:
  //          - int setAlarmOnMonitor(workstationInformation_ logInfo, long alarmId, int monitorId);
  //          or if the given monitor is groupless monitor:
  //          - int ackAlarmToTarget(workstationInformation_ logInfo, long alarmId, int monitorId); - THIS ACKNOWLEDGE THE ALARM(s).
  rpc SetAlarmsOnMonitor(SetAlarmsOnMonitorRequest) returns (MultipleRequestsResponse);
  //
  // Used to reset a monitors group.
  // TAO IDL:
  //          - int resetMonitorGroup(int groupId);
  rpc ResetMonitorGroups(ListIds) returns (MultipleRequestsResponse);

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // User alarm marking operations
  //

  //
  // Used to mark an user/manual alarm associated with the given source identification.
  // This method return information is the marking handle which can be used to change the user marking.
  // TAO IDL:
  //          - int markUserAlarm(workstationInformation_ logInfo, int userId, int SourceId, int alarmSubtypeId, sTag, sSensorAlarmSubtypeTagId, sNotes, IntHolder alarmId);
  rpc MarkUserAlarm(MarkUserAlarmRequest) returns (NumericResponse);

  //
  // Used to edit user/manual alarm markings data.
  // TAO IDL:
  //          - int changeUserMarkAlarm(workstationInformation_ logInfo, int alarmId, int userId, String sTag, String sSensorAlarmSubtypeTagId, String notes, boolean isMarkingEnd);
  rpc EditUserMarkAlarm(MarkUserAlarmEditRequest) returns (Response);

  //
  // Returns sensor alarm types. Normally used in the user alarms marking operations.
  // TAO IDL:
  //          - ???????
  // NOTE: probably we need to implement this in the CCTV module or adding a TAO API in the configuration IDL.
  //       DB access???
  rpc GetSensorAlarmTypes(WorkstationInformation) returns (ListSensorAlarmTypesResponse);

  //
  // Returns sensor alarm subtypes. Normally used in the user alarms marking operations.
  // TAO IDL:
  //          - ???????
  // NOTE: probably we need to implement this in the CCTV module or adding a TAO API in the configuration IDL.
  //       DB access???
  rpc GetSensorAlarmSubtypes(WorkstationInformation) returns (ListSensorAlarmSubtypesResponse);
  //
  // Returns sensor alarm subtype tags. Normally used in the user alarms marking operations.
  // TAO IDL:
  //          - ???????
  // NOTE: probably we need to implement this in the CCTV module or adding a TAO API in the configuration IDL.
  //       DB access???
  rpc GetSensorAlarmSubtypesTags(WorkstationInformation) returns (ListSensorAlarmSubtypesTagsResponse);


  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // Equipments interfaces
  //

  //
  // Lock/Unlock equipments, normally cameras. The r
  // NOTE: if the globalResponse, present in the returned MultipleRequestsResponse,
  //       is OK, there's no need to use the specific lock/unlock response item.
  //
  //  Param:
  //
  //  Returns: the return is a little bit tricky. To really check for the operation "ping"
  //           return success this method MUST be called w/ an array of equips with ONLY ONE element.
  //
  // TAO IDL:
  //          - int ping(int IG, int priorityLevel, int[] lockedEquips, int IGTimeout);
  //          - int releaseEquipment(workstationInformation_ logInfo, int equipId, int IG, int priorityLevel);
  rpc LockUnlockEquipments(LockUnlockEquipsRequest) returns (MultipleRequestsResponse);

  //
  // Get ALL locked equipments, normally cameras.
  // TAO IDL:
  //          - int getLockedEquipments(...);
  rpc GetLockedEquipments(WorkstationInformation) returns (NumericsResponse);

  //
  // From the given list of equipments, obtain all its states.
  // TAO IDL:
  //          - int getState(int EqId);
  rpc GetEquipmentsGenericState(ListIds) returns (EquipmentsGenericStateResponse) ;

  //
  // From the given list of equipments, obtain all its specific states.
  // TAO IDL:
  //          - int getSpecificState(int EqId);
  rpc GetEquipmentsSpecificState(ListIds) returns (EquipmentsSpecificStateResponse);

  //
  // From the given list of equipments, return all its connection information, generic and specific configuration
  // TAO IDL:
  //          - String getGenericConfiguration(int EqId);
  //          - String getSpecificConfiguration(int EqId);
  //          - String getCommunicationSettings(int EqId);
  //
  // TODO: NEEDS IMPLEMENTATION ON THE StvSa!!!!
  //
  rpc GetEquipmentsConfiguration(ListIds) returns (EquipmentsConfigurationResponse);

  //
  // Execute all ptzf cameras presets operations: activate, add, update or delete.
  //
  // NOTE: THIS METHOD WILL CALL THE EQUIPMENT (not only the database).
  //
  // TAO IDL:
  //          - int ptzfActivatePreset(int EqId, short nPreset);
  //          - int ptzfStorePreset(workstationInformation_ logInfo, int EqId, short nPreset);
  //          and, for saving the real preset name, call the configuraion.idl API "storePreset(PresetConfigStv_)";
  //          - int ptzfDeletePreset(workstationInformation_ logInfo, int EqId, short nPreset);
  rpc CamerasPtzfPresetsOperation(CameraPtzfSavePresetsRequest) returns (CameraPtzfSavePresetsResponse);

  //
  // Execute all actuator operations: actuate or deactuate.
  // TAO IDL:
  //          - int actuate(workstationInformation_ logInfo, int EqId, int lDuration);
  //          - int deactuate(workstationInformation_ logInfo, int EqId);
  rpc ExecActuatorOperation(ActuatorOperationsRequest) returns (ActuatorOperationsResponse);

  //
  // Used to signal the CCTV service that the cameras associated with the given MobileCamHomePos
  // were PTZFed, i.e., moved, so, CCTV service should proccess the camera PTZF accordingly, normally
  // and if the "Return to Home Position" is enabled, reset/restart the timer to move the PTZF camera
  // to its Home position after the configured timeout.
  // This API is also used to configure the "Go to Home Position" feature.
  // TAO IDL:
  //          - 	int ptzf(workstationInformation_ logInfo, MobileCamHomePosReturn_[]);
  rpc PtzfOperationExecuted(MobileCameraAutoHomePositionActivationsRequest) returns (MultipleRequestsResponse);

  //
  // Returns all the "Go to Home Position" mobile cameras configurations.
  // TAO IDL:
  //          - int getMobileCamerasHomePosConfig(workstationInformation_, listMobileCamHomePosReturnHolder);
  rpc GetMobileCamerasAutoHomePositionActConfig(WorkstationInformation) returns (ListMobileCameraAutoHomePositionActivationsResponse);

  //
  // Used to delete mobile cameras "Go to Home Position" configurations.
  // TAO IDL:
  //          - int deleteMobileCamerasHomePosConfig(workstationInformation_ , MobileCamHomePosReturn_[] );
  rpc DeleteMobileCamerasAutoHomePositionAct(MobileCameraAutoHomePositionActivationsRequest) returns (MultipleRequestsResponse);



  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // Sequences interfaces
  //

  // Starting sequences in the targets, normally monitors, all given in the StartSeqsInTargetsRequest message.
  // TAO IDL:
  //          - int setSequenceinTarget(workstationInformation_ logInfo, int SeqID, int TargetID);
  rpc StartSequences(StartSequencesRequest) returns (RunningSequencesResponse);

  // For all given sequences, executes the given operation: stop, pause, restart and steps forward and backward.
  // TAO IDL:
  //          - int stopSequence(workstationInformation_ logInfo, int SeqHdl);
  //          - int startSequence(workstationInformation_ logInfo, int SeqHdl);
  //          - int pauseSequence(workstationInformation_ logInfo, int SeqHdl);
  //          - int showNextStep(int SeqHdl);
  //          - int showPreviousStep(int SeqHdl);
  //          or if we desire to stop all running sequences using the given sequence id:
  //          - int stopAllSequences(workstationInformation_ logInfo, int SeqId);
  rpc ExecSequencesOperation(SequencesOperationRequest) returns (RunningSequencesResponse);

  // Obtain all running sequences.
  // The request can be filter by the given WorkStation, targets, sequences handles, etc,
  // configured in the RunningSequencesRequest parameter, if any.
  // Can be used to obtain:
  //      - all running sequences, if the given parameter is unset;
  //      - sequences states;
  //      - which, if any, sequences are active in the given targets;
  //      - etc.
  //
  // TAO IDL:
  //      - void getRunningSeqs(...); (returns ALL running seqs BUT NO HANDLE)
  //      - int getSequenceInTargetData(int targetId, ...); (returns all info)
  //      - int getSequenceInTarget(int targetId); (we returns the sequence handle)
  rpc GetRunningSequences(RunningSequencesRequest) returns (RunningSequencesResponse);


  /////////////////////////////////////////////////////////////////////////////
  // Macros interfaces
  //

  // For all given macros, executes the given operation, i.e., start or stop.
  // NOTE: if the globalResponse, present in the returned MultipleRequestsResponse,
  //       is OK, there's no need to use the specific macro response item.
  // TAO IDL:
  //          - int runMacro(workstationInformation_ logInfo, int macroId); (return the macro handle)
  //          - stopMacro(macroHandle)
  rpc ExecMacrosOperation(MacrosOperationRequest) returns (MacroOperationsResponse);

}
