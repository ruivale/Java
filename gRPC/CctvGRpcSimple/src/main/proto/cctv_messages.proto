/////////////////////////////////////////////////////////////////////////////////////
//  Links:
//      https://learn.microsoft.com/en-us/aspnet/core/grpc/json-transcoding?view=aspnetcore-8.0
//      https://www.infoq.com/articles/dotnet-grpc-json-transcoding/
//      https://learn.microsoft.com/en-us/aspnet/core/grpc/json-transcoding-binding
//      https://learn.microsoft.com/en-us/aspnet/core/grpc/json-transcoding-openapi?view=aspnetcore-8.0
//      https://learn.microsoft.com/en-us/aspnet/core/grpc/aspnetcore?view=aspnetcore-8.0
//      https://cloud.google.com/endpoints/docs/grpc/transcoding
//      https://cloud.google.com/apis/design/naming_convention
//
/////////////////////////////////////////////////////////////////////////////////////

syntax = "proto3";
package proto;

option csharp_namespace = "Com.Efacec.ES.TRP.Efarail.Cctv.Grpc.Messages.v1";
option java_package = "com.efacec.es.trp.efarail.cctv.grpc.messages.v1";


import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

import "cctv_enums.proto";


//package com.efacec.es.trp.efarail.cctv.grpc.messages.v1;


////////////////////////////////////////////////////////////////////////////////////
//
// CCTV messages
//
//

//
// THE empty message
message Empty {} 

//
// Generic numeric reply
message Response {
    // The numeric value to return to the caller.
    ResponseValue responseValue = 1;
    // A description of the returned value, if needed/wanted (can be left empty).
    string desc = 2;
}

//
// Generic numeric message
message NumericResponse {
    // The numeric value.
    Response response = 1;
    // The numeric response identification
    int64 id = 2;
}

//
// Generic multiple numeric message
message NumericsResponse {
    // The numeric value.
    Response response = 1;
    // The 
    repeated int64 ids = 2;
}

//
// The user message
message User {
    // The user identification
    google.protobuf.Int64Value id = 1;
    // The user name
    google.protobuf.StringValue login = 2;
    // The user name
    google.protobuf.StringValue name = 3;
}

//
// The user access request: login or logout.
message UserAccessRequest {
    // The user identification
    User user = 1;
    // The acces type: login or logout.
    UserAccessType userAccessType = 2;
}

//
// Generic version reply
message CctvVersion {
    // The version value.
    int64 version = 1;
    // The subversion value.
    int64 subVersion = 2;
    // The revision value.
    int64 revision = 3;
    // The build value.
    int64 build = 4;
    // A description of the returned value, if needed/wanted (can be left empty).
    string desc = 5;
    // The module.
    VersionMod versionMod = 6;
}

//
// Generic multiple versions reply
message ListCctvVersionsResponse {
    // Global reply for the request. If this is OK, then ALL requests were successful. 
    Response response = 1;
    // The requested modules versions.
    repeated CctvVersion cctvVersions = 2;
}

//
// The current WorkStation information. Normally used by the auditing system.
message WorkstationInformation {
    // The user name of the logged user, i.e., the user login.
    google.protobuf.StringValue userName = 1;
    // The workstation identification.
    google.protobuf.Int64Value id = 2;
    //
    // TODO: should we add the user id?
}

//
// Message used when version are requested.
message VersionsRequest {
    // The workstation information.
    WorkstationInformation workstationInfo = 1;
    // The requested module.
    VersionMod versionMod = 2;
}

// Basic message holder for connections, i.e., only the source and target data. 
message ConnectionInfo {
    // The source, normally a camera, identification  but could also be a sequence id...
    google.protobuf.Int64Value sourceId = 1;
    // The target equipment, normally a monitor, identification.
    google.protobuf.Int64Value targetId = 2;
}

// Set source in target connection attempts data.
message ConnectionRequest {
    // The basic, i.e. source & target, data.
    ConnectionInfo connectionInfo = 1;
    // The source equipment port (can be left without a value, i.e. 0).
    google.protobuf.Int64Value sourcePort = 2;
    // The target equipment port (can be left without a value, i.e. 0).
    google.protobuf.Int64Value targetPort = 3;
    // Used, if needed to set the address where to connect.
    google.protobuf.StringValue address = 4;
}

//
// Struct used while setting connections between sources equipments, normally cameras
// and targets, normally monitors.
message ConnectionsRequest {
    // The workstation information.
    WorkstationInformation workstationInfo = 1;
    // List of connections to attempt.
    repeated ConnectionRequest connectionRequests = 2;
}

//
// Message used when a list of IDs is needed.
message ListIds {
    // The workstation information, if needed.
    WorkstationInformation workstationInfo = 1;
    // Items Ids, whatever tey mean, i.e., sources equipments, targets equipments, 
    // sequences ids, active sequences handles, etc.
    repeated google.protobuf.Int64Value ids = 2;
}
//
// Message used when a list of IDs is needed.
message ListIdsResponse {
    // Global reply for the request. If this is OK, then ALL requests were successful. 
    Response response = 1;
    // Items Ids, whatever tey mean, i.e., sources equipments, targets equipments, 
    // sequences ids, active sequences handles, etc.
    repeated google.protobuf.Int64Value ids = 2;
}

//
// Message used while obtaining targets, normally monitors, connection info. 
// This is not directly used by the Operation service.
message DetailedConnectionInfo {
    // The target identification.
    int64 targetId = 1;
    // The type of active source in a target.
    SourceObj sourceObj = 2;
    // Additional info for SourceObj.REPLAY type.
    int64 handle = 3;
    // The source identification i.e,, an equipment id, a sequence id, etc.
    int64 sourceId = 4;
    // The source station identification when available/used/set.
    int64 stationId = 5;
    // The recorder source identification when available/used/set.
    int64 recorderSourceId = 6;
}

//
// Message used while obtaining targets, normally monitors, connection info.
message DetailedConnectionsInfoResponse {
    // The request reply.
    Response response = 1;
    // the list of targets connection information.
    repeated DetailedConnectionInfo detailedConnectionInfos = 2;
}

//
// Return message when multiple requests are sent in a single invocation.
message MultipleRequestsResponse {
    // Global reply for the request. If this is OK, then ALL requests were successful. 
    Response globalResponse = 1;
    // The list of IDs and request status of each one of them. 
    // NOTE: if the globalReply is OK, there no need to use this item.
    repeated NumericResponse specificResponses = 2;
}

//
// Information associated to a sequence start.
message SequenceConnInfo {
    // The connection info, i.e., sequence, the source item in the message, and target.
    ConnectionInfo connectionInfo = 1;
    // Used for syncronous sequences. Values from 0..30, in intervals of 5 meaning seconds.
    // NOTE: nowadays, @2406, not used anymore... but here just in case
    google.protobuf.StringValue syncTime = 2;
}

//
// The sequences starting command request.
message StartSequencesRequest {
    // The workstation information.
    WorkstationInformation workstationInfo = 1;
    // The sequences information.
    repeated SequenceConnInfo sequenceConnInfos = 2;
}

//
// The sequence basic information, normally used to define a sequence but NOT a running one.
message Sequence {
    // The sequence identification.
    int64 id = 1;
    // The sequence name.
    string name = 2;
    // The sequence mode: undefined, ciclic or non ciclic.
    SequenceMode mode = 3;
}

//
// Reply message when all sequences are requested.
message ListSequencesResponse {
    // Global reply for the request. If this is OK, then ALL requests were successful. 
    Response response = 1;
    // All the sequences
    repeated Sequence sequences = 2;
}

//
// The running sequence data holder.
message RunningSequence {
    // The sequence identification. 
    // May not be needed if the handle is set. It can be useful, but not always mandatory.
    google.protobuf.Int64Value id = 1;
    // The running sequence handle, i.e., the running sequence identification.
    google.protobuf.Int64Value handle = 2;
    // The running sequence active target, normally not needed but can be sent just in case.
    google.protobuf.Int64Value targetId = 3;
    // The sequence state. Depending on the operation, this value could be not set.
    SequenceState state = 4;
    // Used for syncronous sequences. Values from 0..30, in intervals of 5 meaning seconds.
    // NOTE: nowadays, @2406, not used anymore... but here just in case.
    google.protobuf.Int64Value syncTime = 5;
}

//
// The running sequences data holder.
message RunningSequencesRequest {
    // The workstation information.
    WorkstationInformation workstationInfo = 1;
    // The running sequencse handles, i.e., the running sequence identification
    repeated RunningSequence runningSequences = 2;	
}

//
// The running sequence reply message.
message RunningSequenceResponse {
    // Global reply for the request. If this is OK, then ALL requests were successful. 
    Response response = 1;
    // The running sequence handle and target
    RunningSequence runningSequence = 2;
    // The running sequence state, i.e., one from SequenceOper (When )
    SequenceOper SequenceOper = 3;
}

//
// The running sequences reply message, normally used when obtaining all running sequences.
message RunningSequencesResponse {
    // Global reply for the request. If this is OK, then ALL requests were successful. 
    Response response = 1;
    // The running sequences reply message
    repeated RunningSequenceResponse runningSequencesResponse = 2;
}

//
// Used when stopping, pausing, restarting sequences. 
// Only a single SequenceOper can be applied to the given list of sequences or targets.
message SequencesOperationRequest {
    // The workstation information.
    WorkstationInformation workstationInfo = 1;
    // The sequence oper: stop, pause, restart, next or previous step.
    SequenceOper sequenceOper = 2;
    // Items Ids, whatever they mean, i.e., targets equipments or sequences handles 
    // depending on the set prop from MsgRunningSequence.
    repeated RunningSequence runningSequences = 3;
}

//
// Return message when multiple requests are sent in a single macro operation invocation.
message MacroOperationResponse {
    // Specific response
    Response response = 1;
    // The macro identification.
    int64 macroId = 2;
    // The macro operation handle. Used when a start/run macro is used/called.
    int64 macroHandle = 3;
}

//
// Return message when multiple requests are sent in a single invocation.
message MacroOperationsResponse {
    // Global reply for the request. If this is OK, then ALL requests were successful. 
    Response globalResponse = 1;
    // The list of macros ids and its handle if the request was for a start/run macro.
    // NOTE: if the globalReply is OK, there no need to use this item.
    repeated MacroOperationResponse macroOperationsResponses = 2;
}

//
// Used to start and stop macros. 
// Only a single MacroOper can be applied to the given list of macros.
message MacrosOperationRequest {
    // The workstation information.
    WorkstationInformation workstationInfo = 1;
    // The macro oper, i.e., start or stop.
    MacroOper macroOper = 2;
    // Macros Ids.
    repeated google.protobuf.Int64Value ids = 3;
}

//
// Alarm information.
message Alarm {
    // The alarm identification
    AlarmType type = 1;
    // The alarm parameters
    string params = 2;
    // The alarm equipment identification, if any.
    int64 equipmentId = 3;
    // The alarm station identification, if any.
    int64 stationId = 4;
    // The alarm trigger, if any.
    int64 trigger = 5;
}

//
// List of alarms, normally used when obtaing the list of ALL active alarms.
message ListAlarms {
    // The list of alarms.
    repeated Alarm alarms = 1;
}

//
// List of alarms, normally used when obtaining the list of ALL active alarms.
message ListAlarmsResponse {
    // Global reply for the request. If this is OK, then ALL requests were successful. 
    Response response = 1;
    // The list of alarms.
    repeated Alarm alarms = 2;
}

//
// Message used when a lock, or unlock, equipments request is invoked.
message LockUnlockEquipsRequest {
    // The workstation information.
    WorkstationInformation workstationInfo = 1;
    // The list of identifications, normally from cameras.
    repeated google.protobuf.Int64Value ids = 2;
    // The lock or unlock Operation.
    LockUnlockType lockUnlockType = 3;
    // The operation priority (normally associated w/ user profile priority)
    google.protobuf.Int64Value priority = 4;
    // The lock timeout. If, before this timeout ends, Cctv does not receive further locks, the locks ends.
    google.protobuf.Int64Value timeout = 5;
}

//
// Equipment generic state.
message EquipmentGenericState {
    // The equipment identification
    int64 equipId = 1;
    // The generic state.
    EquipGenericState equipGenericState = 2;
}

//
// The equipments generic state response.
message EquipmentsGenericStateResponse {
    // Global reply for the request. If this is OK, then ALL requests were successful. 
    Response response = 1;
    //
    repeated EquipmentGenericState equipmentGenericStates = 2;
}

//
// Equipment specific state.
message EquipmentSpecificState {
    // The equipment identification
    int64 equipId = 1;
    // The generic state.
    EquipSpecificState equipSpecificState = 2;
}

//
// The equipments specific state response.
message EquipmentsSpecificStateResponse {
    // Global reply for the request. If this is OK, then ALL requests were successful. 
    Response response = 1;
    //
    repeated EquipmentSpecificState equipmentSpecificStates = 2;
}

//
// An equipment associated data.
message Equipment {
    // The equipment identification.
    google.protobuf.Int64Value id = 1;
    // The equipment name.
    google.protobuf.StringValue name = 2;
    // The equipment type.
    google.protobuf.Int64Value type = 3;
    // Is the equipment enabled?
    google.protobuf.BoolValue enabled = 4;
    // The equipment station identification.
    google.protobuf.Int64Value stationId = 5;
    // The equipment communications settings.
    google.protobuf.StringValue commSettings = 6;
    // The equipment generic state.
    EquipGenericState genericState = 7;
    // The equipment specific state.
    EquipSpecificState specificState = 8;
    // The equipment generic configuration.
    google.protobuf.StringValue genericConfig = 9;
    // The equipment specific configuration.
    google.protobuf.StringValue specificConfig = 10;
    // The equipment associated box identification, if any.
    google.protobuf.Int64Value boxId = 11;
}

//
// The equipments response.
message ListEquipmentsResponse {
    // Global reply for the request. If this is OK, then ALL requests were successful. 
    Response response = 1;
    // The list of equipments.
    repeated Equipment equipments = 2;
}

//
// An equipment associated data.
message EquipmentConfiguration {
    // The equipment identification.
    google.protobuf.Int64Value id = 1;
    // The equipment communications settings.
    google.protobuf.StringValue commSettings = 2;
    // The equipment generic configuration.
    google.protobuf.StringValue genericConfig = 3;
    // The equipment specific configuration.
    google.protobuf.StringValue specificConfig = 4;
}

//
// The equipments configuration response.
message EquipmentsConfigurationResponse {
    // Global reply for the request. If this is OK, then ALL requests were successful. 
    Response response = 1;
    //
    repeated EquipmentConfiguration equipmentConfigurations = 2;
}

//
// A camera preset CRUD operation message.
message CameraPtzfPreset {
    // The camera identification.
    google.protobuf.Int64Value cameraId = 1;
    // The ptzf camera preset slot index.
    google.protobuf.Int64Value index = 2;
    // The ptzf camera preset name.
    google.protobuf.StringValue name = 3;
}

//
// The cameras preset CRUD operations request.
message CameraPtzfSavePresetsRequest {
    // The workstation information.
    WorkstationInformation workstationInfo = 1;
    // The camera identification.
    repeated CameraPtzfPreset cameraPtzfPresets = 2;
    // The request operation: add, update and delete
    CameraPtzfPresetOperation cameraPtzfPresetOperation = 3;
}

//
// The cameras preset CRUD operation response.
message CameraPtzfSavePresetResponse {
    // The response.
    Response response = 1;
    // The camera preset saving information.
    CameraPtzfPreset cameraPtzfPreset = 2;
}

//
// The cameras preset CRUD operations request.
message CameraPtzfSavePresetsResponse {
    // Global reply for the request. If this is OK, then ALL requests were successful. 
    Response response = 1;
    // The list of saving cameras presets responses.
    repeated CameraPtzfSavePresetResponse cameraPtzfSavePresetResponses = 2;
}

//
// The actuator operation: actuate or deactuate.
message ActuatorOperationRequest {
    // The actuator identification.
    google.protobuf.Int64Value actuatorId = 1;
    // The actuator operation.
    ActuatorOperation actuatorOperation = 2;
}

//
// The actuator operations request.
message ActuatorOperationsRequest {
    // The workstation information.
    WorkstationInformation workstationInfo = 1;
    // The list of actuator operations.
    repeated ActuatorOperationRequest actuatorOperationRequests = 2;
}

//
// Single actuator operation request response.
message ActuatorOperationResponse {
    // The response.
    NumericResponse response = 1;
    // The actuator operation.
    ActuatorOperation actuatorOperation = 2;
}

//
// Actuators operations requests response.
message ActuatorOperationsResponse {
    // Global reply for the request. If this is OK, then ALL requests were successful. 
    Response response = 1;
    // The response.
    repeated ActuatorOperationResponse actuatorOperationResponses = 2;
}

//
// The "Not Acknowledged Alarm".
message NotAcknowledgedAlarm {
    // The associated monitors list identification.
    int64 groupId = 1;
    // The monitor identification (of course, the given monitor identification, if valid, must be a monitor "belonging" to the group set. ).
    int64 monId = 2;
    // The not acknowledged alarm identification.
    int64 alarmId = 3;
    // The not acknowledged alarm position "inside" the alarms stack list.
    int64 pos = 4;
    // The not acknowledged alarm description.
    string description = 5;
    // The not acknowledged alarm source equipment identification, normally pointing to a camera.
    int64 sourceId = 6;
    // The not acknowledged alarm source equipment, normally a camera, preset, if set and if the camera is a PTZ one.
    int64 prePos = 7;
}

//
// The acknowledge alarms response, which, basicaly, is the new list of NotAcknowledgeAlarms.
message AcknowledgeAlarmsResponse {
    // Global reply for the request. If this is OK, then ALL requests were successful. 
    Response response = 1;
    //
    repeated NotAcknowledgedAlarm notAcknowledgedAlarms = 2;
}

//
// The "Set Alarms On Monitor" connection request. 
message AlarmMonitorConnectionInfo {
    // if true, the operation is directed to a monitor in a group, aka alarm monitor.
    google.protobuf.BoolValue monitorInGroup = 1;
    // the source & target info.
    ConnectionInfo connectionInfo = 2;
}

//
// The "Set Alarms On Monitor" request. Basically is a list of NotAcknowledgeAlarms identifications and target equipments, normally monitors, identifications.
message SetAlarmsOnMonitorRequest {
    // The workstation information.
    WorkstationInformation workstationInfo = 1;
    // The connections info, i.e., source and target identifications pairs.
    repeated AlarmMonitorConnectionInfo connectionInfos = 2;
}

//
// The mark an user alarm message associated with the given source identification. 
message MarkUserAlarmRequest {
    // The workstation information.
    WorkstationInformation workstationInfo = 1;
    // The user identification.
    google.protobuf.Int64Value userId = 2;
    // The source equipment identification.
    google.protobuf.Int64Value equipId = 3;
    // The alarm sub type identification. (from STV DB. t_sensoralarmsubtypes)
    google.protobuf.Int64Value alarmSubtypeId = 4;
    // The marking parameters. (from STV DB: t_sensralarsubtypes_tags_parms)
    google.protobuf.StringValue param = 5;
    // The marking subtype tag id of the sensor. (from STV DB: t_sensoralarmsubtypes_tags)
    google.protobuf.StringValue alarmSensorSubtypeTagId = 6;
    // The marking notes. (from STV DB: t_video_recalarm_params)
    google.protobuf.StringValue notes = 7;
}

//
// A sensor alarm type.
message SensorAlarmType {
    // The sensor alarm type identifiction.
    int64 id = 1;
    // The sensor alarm type description.
    string description = 2;
}

//
// A list of sensor alarm types.
message ListSensorAlarmTypes {
    // The list of SensorAlarmType.
    repeated SensorAlarmType sensorAlarmTypes = 1;
}

//
// A list of sensor alarm types.
message ListSensorAlarmTypesResponse {
    // Global reply for the request. If this is OK, then ALL requests were successful. 
    Response response = 1;
    // The list of SensorAlarmType.
    repeated SensorAlarmType sensorAlarmTypes = 2;
}

//
// A sensor alarm subtype.
message SensorAlarmSubtype {
    // The sensor alarm type identifiction.
    int64 id = 1;
    // The sensor alarm type description.
    string description = 2;
    // The sensor alarm type.
    SensorAlarmType sensorAlarmType = 3;
    // Indicates if the sensor alarm subtype can be searchable in any searchable GUI.
    bool guiSearchable = 4;
    // The sensor alarm subtype priority.
    int64 priority = 5;
}

//
// A list of sensor alarm subtypes.
message ListSensorAlarmSubtypes {
    // The list of SensorAlarmSubtype.
    repeated SensorAlarmSubtype sensorAlarmSubtypes = 1;
}

//
// A list of sensor alarm subtypes.
message ListSensorAlarmSubtypesResponse {
    // Global reply for the request. If this is OK, then ALL requests were successful. 
    Response response = 1;
    // The list of SensorAlarmSubtype.
    repeated SensorAlarmSubtype sensorAlarmSubtypes = 2;
}

//
// A sensor alarm subtype tag.
message SensorAlarmSubtypesTag {
    // The sensor alarm type identifiction.
    int64 id = 1;
    // The sensor alarm subtype tag description.
    string description = 2;
    // The sensor alarm subtype tag name.
    string name = 3;
    // True if the sensor alarm subtype tag needs parameters when used.
    bool hasParameters = 4;
    // True if the sensor alarm subtype tag allows for notes to be added when used.
    bool allowNotes = 5;
    // The sensor alarm subtype tag associated subtype.
    SensorAlarmSubtype sensorAlarmSubtype = 6;
    // Trie if the sensor alarm subtype tag is te default one in the system.
    bool default = 7;
}

//
// A list of sensor alarm subtype tags.
message ListSensorAlarmSubtypesTags {
    // The list of SensorAlarmSubtype.
    repeated SensorAlarmSubtypesTag sensorAlarmSubtypesTags = 1;
}

//
// A list of sensor alarm subtype tags.
message ListSensorAlarmSubtypesTagsResponse {
    // Global reply for the request. If this is OK, then ALL requests were successful. 
    Response response = 1;
    // The list of SensorAlarmSubtype.
    repeated SensorAlarmSubtypesTag sensorAlarmSubtypesTags = 2;
}



//
// The message used to edit an already user/manual alarm marking.
message MarkUserAlarmEditRequest {
    // The workstation information.
    WorkstationInformation workstationInfo = 1;
    // The alarm identification.
    google.protobuf.Int64Value alarmId = 2;
    // The user identification.
    google.protobuf.Int64Value userId = 3;
    // The marking tag parameter. 
    google.protobuf.StringValue tag = 4;
    // The marking subtype tag id of the sensor. 
    google.protobuf.StringValue alarmSensorSubtypeTagId = 5;
    // The marking notes. (from STV DB: t_video_recalarm_params)
    google.protobuf.StringValue notes = 6;
    // If true it means the marking just occurred. False for all other usages.
    google.protobuf.BoolValue markingEnd =  7;
}

//
// The "normal" acknowledge alarms message, Normally used to acknowledge sensors and actuators alarms.
message AckAlarmsRequest {
    // The workstation information.
    WorkstationInformation workstationInfo = 1;
    // The equipment identification.
    google.protobuf.Int64Value equipId = 2;
    // The list os alarms to acknowledge.
    repeated google.protobuf.Int64Value alarmIds = 3;
}

//
// A PTZF operation associated info. Used when a PTZF camera is PTZFed, i.e., moved, 
// and it supports the "Return to Home Position" feature.
// Its used for configuration and operation (reset/restart the "Go to Home Position" timer).
message MobileCameraAutoHomePositionActivation {
    // The camera identification.
    google.protobuf.Int64Value camId = 1;
    // If true it means the camera has the "Go To Home Position" feature enabled.
    google.protobuf.BoolValue enabled =  2;
    // The "Return to Home Position" timeout, i.e., the ammount of seconds before moving 
    // the camera to its configured home position after the last PTZF operation was performed.
    google.protobuf.Int64Value timeout = 3;
    // The camera preset index used to set the home position.
    google.protobuf.Int64Value preset = 4;
    // True if the home position is set by a PreSet, 
    // false if the home position is set by a pre-configured value (stored in T_OPTIONSSTV [PRESETS_HOME oprtion]).
    google.protobuf.BoolValue hasHomePosSet =  5;
    // If 1 (true), a sequence start will disable the feature for the camera until the sequence is stopped (the camera must be present in the sequence list of operations).
    google.protobuf.BoolValue sequenceMng =  6;
    // If 1 (true), a alarm reaction, which has the camera in its associated macro actions, will disable the feature. For it to be enabled again, the user must start it.
    google.protobuf.BoolValue alarmMng =  7;
}

//
// The "Go to Home Position" oper/config request message.
message MobileCameraAutoHomePositionActivationsRequest {
    // The workstation information.
    WorkstationInformation workstationInfo = 1;
    // The PTZF operations.
    repeated MobileCameraAutoHomePositionActivation mobileCameraAutoHomePositionActivations = 2;
}

//
// The list of PtzfOperation.
message ListMobileCameraAutoHomePositionActivations {
    // The list of PtzfOperations.
    repeated MobileCameraAutoHomePositionActivation mobileCameraAutoHomePositionActivations = 1;
}

//
// The list of PtzfOperation.
message ListMobileCameraAutoHomePositionActivationsResponse {
    // Global reply for the request. If this is OK, then ALL requests were successful. 
    Response response = 1;
    // The list of PtzfOperations.
    repeated MobileCameraAutoHomePositionActivation mobileCameraAutoHomePositionActivations = 2;
}

//
// The Cctv agent data.
message Agent {
    // The agent identification.
    int64 id = 1;
    // The agente address.
    string address = 2;
    // True if the agent is enabled.
    bool enabled = 3;
    // The agent server identification.
    int64 serverId = 4;
}

//
// The Cctv station.
message Station {
    // The station identification.
    int64 id = 1;
    // The station name.
    string name = 2;
    // The station status.
    int64 status = 3;
    // True if the station is enabled.
    bool enabled = 4;
    // The station polling timeout. (?????)
    int64 pollingTimeout = 5;
    // The station identification
    int64 type = 6;
}

//
// The Cctv equipment class.
message EquipmentClass {
    // The equipment class identification.
    int64 id = 1;
    // The equipment class name.
    string name = 2;
    // The equipment class generic configuration sintaxe.
    string sxGenericConfig = 3;
}

//
// The Cctv equipment type.
message EquipmentType {
    // The equipment type identification.
    int64 id = 1;
    // The equipment type name.
    string name = 2;
    // The equipment type class identification.
    int64 classId = 3;
    // The equipment type generic configuration.
    string genericConfig = 4;
    // The equipment type specific configuration.
    string specificConfig = 5;

//    // The equipment type communication settings.
//    string commSettings = n;
//    // The equipment type video terminals.
//    string videoTerminals = n;
//    // The equipment type driver.
//    string driver = n;
}

//
// An Cctv agent configuration and the network data: agent, stations, equipment classes, equipment types and equipments.
message CctvConfig {
    // The agent configuration.
    Agent agent = 1;
    // The agent stations.
    repeated Station stations = 2;
    // The agent equipment classes.
    repeated EquipmentClass equipmentClasses = 3;
    // The agent equipment types.
    repeated EquipmentType equipmentTypes = 4;
    // The agent equipments.
    repeated Equipment equipments = 5;
}

//
// The Cctv basic network configuration grouped by Cctv agents.
message CctvConfigResponse {
    // Global reply for the request. If this is OK, then ALL requests were successful. 
    Response response = 1;
    // The workstation information.
    WorkstationInformation workstationInfo = 2;
    // The agents configurations.
    repeated CctvConfig cctvConfigs = 3;
}

//
// The sequences operation. Basically holds info about a sequence iteraction.
message SequenceOperation {
    // 
    google.protobuf.Int64Value sequenceId = 1;
    // 
    google.protobuf.Int64Value position = 2;
    // 
    google.protobuf.BoolValue enabled = 3;
    // 
    google.protobuf.Int64Value equipmentId = 4;
    // 
    google.protobuf.StringValue equipmentParam = 5;
    // 
    google.protobuf.Int64Value duration = 6;
}

//
// The sequence configuration message.
message SequenceFullData {
    // The basic sequence data: identification, name and mode.
    Sequence sequence = 1;
    // The list of sequence operations, i.e., its iteractions.
    repeated SequenceOperation sequenceOperations = 2;
}

//
// The sequence basic info and its operations.
message ListSequenceFullData {
    // The list of complete sequnce data, i.e., its basic data and its operations.
    repeated SequenceFullData sequenceFullDatas = 1;
}

//
// The sequence basic info and its operations.
message ListSequenceFullDataResponse {
    // Global reply for the request. If this is OK, then ALL requests were successful. 
    Response response = 1;
    // The list of complete sequnce data, i.e., its basic data and its operations.
    repeated SequenceFullData sequencesFullData = 2;
}

//
// The sequences configurations request.
message SequenceConfigRequest {
    // The workstation information.
    WorkstationInformation workstationInfo = 1;
    // The sequence configuration operation: add, basic edit, full edit and delete.
    SequenceConfig sequenceConfig = 2;
    // The sequences configurations to perform.
    repeated SequenceFullData sequencesFullData = 3;
}

//
// The sequences configurations responses.
message SequenceConfigResponse {
    // Global reply for the request. If this is OK, then ALL requests were successful. 
    Response response = 1;
    // The SequenceConfigurations which were not correctly configured. The ones that went well are absent from this list.
    repeated ListSequenceFullDataResponse sequencesFullDataResponse = 2;
}



//
// A macro action parameter.
message MacroActionParameter {
    // The associated macro identification.
    google.protobuf.Int64Value macroId = 1;
    // The associated macro action number/index.
    google.protobuf.Int64Value actionIdx = 2;
    // The associated macro action parameter number/index.
    google.protobuf.Int64Value paramIdx = 3;
    // The associated macro action parameter value.
    google.protobuf.StringValue value = 4;
}

//
// A list of macro action parameters.
message ListMacroActionParameter {
    repeated MacroActionParameter macroActionParameters = 1;
}

//
// A list of macro action parameters.
message ListMacroActionParameterResponse {
    // Global reply for the request. If this is OK, then ALL requests were successful. 
    Response response = 1;
    // The list of macro actions parameters.
    repeated MacroActionParameter macroActionParameters = 2;
}

//
// The macro action data.
message MacroAction {
    // The associated macro identification.
    google.protobuf.Int64Value macroId = 1;
    // The associated macro identification.
    google.protobuf.Int64Value actionIdx = 2;
    // The associated macro action code identification.
    MacroActionCode macroActionCode = 3;
    // True is the macro action is enabled.
    google.protobuf.BoolValue enabled = 4;
}

//
// A macro action data and its parameters.
message MacroActionFullData {
    // The macro action
    MacroAction macroAction = 1;
    // The macro action parameters.
    repeated MacroActionParameter macroActionParameters = 2;
}

//
// The base macro data.
message Macro {
    // The macro identification.
    google.protobuf.Int64Value id = 1;
    // The macro name.
    google.protobuf.StringValue name = 2;
    // The macro mode.
    MacroMode mode = 3;
    // The user/owner which added the macro.
    google.protobuf.Int64Value ownerId = 4;
    // The macro permission: unknown, private, edit & execute and execute.
    MacroPermission permission = 5;
    // The macro scope: unknown, any, manual and event.
    MacroScope scope = 6;
    // True means the macro can be edited. Normally true when the macro owner is the same 
    // has the user configuring the macro or if the macro permission is "Edit & Execute";
    google.protobuf.BoolValue canEdit = 7;
    // If true, means the macro does not send a notification when it starts.
    google.protobuf.BoolValue silent = 8;
}

//
// The macro basic data, all its actions and the all actions parameters.
message MacroFullData {
    // The basic macro data.
    Macro macro = 1;
    // The macros actions and all its parameters.
    repeated MacroActionFullData macroActionFullDatas = 2;
}

//
// The request message when trying to obtain macros, filtered or not, configuration data.
message MacrosRequest {
    // The workstation information.
    WorkstationInformation workstationInfo = 1;
    // The macro identification. If its an invalid value, it means there's no filter for macro x, i.e., all macros configurations should be returned.
    google.protobuf.Int64Value id = 2;
    // The user/owner which added the macro. If its an invalid value, it means there's no owner id filter set so, should return all macros configurations.
    google.protobuf.Int64Value ownerId = 3;
}

//
// The request message when trying to obtain macros, filtered or not, configuration data.
message MacroActionParametersRequest {
    // The workstation information.
    WorkstationInformation workstationInfo = 1;
    // The macro identification. If its an invalid value, it means there's no filter for macro x, i.e., all macros configurations should be returned.
    google.protobuf.Int64Value macroId = 2;
    // The macro action index. If its an invalid value, it means there's no filter for macro action index actionIdx.
    google.protobuf.Int64Value actionIdx = 3;
}

//
// The list of macros full data, i.e., macros, its actions and its actions parameters.
message ListMacrosFullData {
    // The list of macros.
    repeated MacroFullData macroFullDatas = 1;
}

//
// The list of macros full data, i.e., macros, its actions and its actions parameters.
message ListMacrosFullDataResponse {
    // Global reply for the request. If this is OK, then ALL requests were successful. 
    Response response = 1;
    // The list of macros.
    repeated MacroFullData macroFullDatas = 2;
}

//
// The list of macros.
message ListMacros {
    // The list of macros.
    repeated Macro macros = 1;
}

//
// The list of macros.
message ListMacrosResponse {
    // Global reply for the request. If this is OK, then ALL requests were successful. 
    Response response = 1;
    // The list of macros.
    repeated Macro macros = 2;
}

//
// The message used when a macro actions are requested.
message MacroActionsRequest {
    // The workstation information.
    WorkstationInformation workstationInfo = 1;
    // The macro identification. If its an invalid value, it means there's no filter for macro x, i.e., all macros configurations should be returned.
    google.protobuf.Int64Value macroId = 2;
}

//
// A list of macro action parameters.
message ListMacroActions {
    // The list of macro actions.
    repeated MacroAction macroActions = 1;
}

//
// A list of macro action parameters.
message ListMacroActionsResponse {
    // Global reply for the request. If this is OK, then ALL requests were successful. 
    Response response = 1;
    // The list of macro actions.
    repeated MacroAction macroActions = 2;
}

//
// The message used to configure macro action(s).
message MacroActionConfigurationRequest {
    // The workstation information.
    WorkstationInformation workstationInfo = 1;
    // The operation: save or delete.
    MacroConfigOper macroConfigOper = 2;
    // The list of action. If it's a save action operation, a full action and parameters save operation 
    // or a delete one, we can obtain all the data from the given list of MacroAction.
    repeated MacroActionFullData macroActionFullDatas = 3;
}

//
// The message used to configure macro action(s).
message MacroActionConfigurationResponse {
    // Global reply for the request. If this is OK, then ALL requests were successful. 
    Response response = 1;
    // The MacroAction which were not correctly configured. The ones that went well are absent from this list.
    repeated MacroAction macroActions = 2;
}

//
// The macros configurations request.
message MacroConfigurationRequest {
    // The workstation information.
    WorkstationInformation workstationInfo = 1;
    // The operation: add, save or delete.
    MacroGenericConfigOper macroGenericConfigOper = 2;
    // The macros complete list of data.
    repeated MacroFullData macroFullData = 3;
}

//
// The macros configurations response.
message MacroConfigurationResponse {
    // Global reply for the request. If this is OK, then ALL requests were successful. 
    Response response = 1;
    // The MacroFullData which were not correctly configured. The ones that went well are absent from this list.
    repeated MacroFullData macroFullDatas = 2;
}

//
// The message used to obtain cameras presets.
message CamerasPresetsRequest {
    // The workstation information.
    WorkstationInformation workstationInfo = 1;
    // The list of cameras identifications.
    repeated google.protobuf.Int64Value cameraIds = 2;
}

//
// The message used when cameras presets are requested. 
message CamerasPresetsResponse {
    // Global reply for the request. If this is OK, then ALL requests were successful. 
    Response response = 1;
    // The list of cameras presets.
    repeated CameraPtzfPreset cameraPtzfPresets = 2;
}

//
// The cameras presets basic edition request (i.e., the STV DB data edition only)
message CamerasPresetsEditionRequest {
    // The workstation information.
    WorkstationInformation workstationInfo = 1;
    // The list of cameras presets.
    repeated CameraPtzfPreset cameraPtzfPresets = 2;
}

//
// The cameras presets basic edition request response (i.e., the STV DB data edition only)
message CamerasPresetsEditionResponse {
    // Global reply for the request. If this is OK, then ALL requests were successful. 
    Response response = 1;
    // The list of cameras presets which were not correctly configured. The ones that went well are absent from this list.
    repeated CamerasPresetsResponse cameraPtzfPresetsResponses = 2;
}

//
// An events reaction i18n message data. 
message I18nMessage {
    // The i18n message language, like: en_GB, pt_PT, nb_NO, etc.
    google.protobuf.StringValue lang = 1;
    // The message itself.
    google.protobuf.StringValue message = 2;
}

//
// The equipment and system event reaction data.
message EquipmentOrSystemEventReaction {
    // The event identification.
    google.protobuf.Int64Value id = 1;
    // The event description.
    google.protobuf.StringValue description = 2;
    // The event reaction configured i18n messages.
    repeated I18nMessage i18nMessages = 3;
    // True if the event reaction is enabled.
    google.protobuf.BoolValue enabled = 4;
    // The reaction parameters.
    google.protobuf.StringValue params = 5;
    // The reaction associated macro identification.
    google.protobuf.Int64Value macroId = 6;
}

//
// The equipment event reaction data.
message EquipmentEventReaction {
    // The basic equipment event reaction data.
    EquipmentOrSystemEventReaction equipmentOrSystemEventReaction = 1;
    // The equipment event reaction alarm type.
    EquipmentEventReactionAlarm equipmentEventReactionAlarm = 2;
}

//
// The system event reaction data.
message SystemEventReaction {
    // The basic system event reaction data.
    EquipmentOrSystemEventReaction equipmentOrSystemEventReaction = 1;
    // The system event reaction alarm type.
    SystemEventReactionAlarm systemEventReactionAlarm = 2;
}

//
// The message used to return all equipment event reactions.
message EquipmentEventReactionResponse {
    // Global reply for the request. If this is OK, then ALL requests were successful. 
    Response response = 1;
    // The equipment event reaction.
    EquipmentEventReaction equipmentEventReaction = 2;
}

//
// The message used to return all equipment event reactions.
message EquipmentEventReactionsResponse {
    // Global reply for the request. If this is OK, then ALL requests were successful. 
    Response response = 1;
    // The list of equipment event reactions.
    repeated EquipmentEventReaction equipmentEventReactions = 2;
}

//
// The message used to return all system event reactions.
message SystemEventReactionResponse {
    // Global reply for the request. If this is OK, then ALL requests were successful. 
    Response response = 1;
    // The system event reaction.
    SystemEventReaction systemEventReaction = 2;
}

//
// The message used to return all system event reactions.
message SystemEventReactionsResponse {
    // Global reply for the request. If this is OK, then ALL requests were successful. 
    Response response = 1;
    // The list of system event reactions.
    repeated SystemEventReaction systemEventReactions = 2;
}

//
// The equipment event reactions configuration request.
// If it's a save and the EquipmentEventReaction.EquipmentOrSystemEventReaction.id 
// is an invalid one, it means it's an addition; otherwise it will be treated as an edition.
message EquipmentEventReactionsConfigurationRequest {
    // The workstation information.
    WorkstationInformation workstationInfo = 1;
    // The type of configuration operation: save or delete.
    EventsReactionConfigOper eventsReactionConfigOper = 2;
    // The list of equipment event reactions to process.
    repeated EquipmentEventReaction equipmentEventReactions = 3;
}

//
// The system event reactions configuration request.
// If it's a save and the EquipmentEventReaction.EquipmentOrSystemEventReaction.id 
// is an invalid one, it means it's an addition; otherwise it will be treated as an edition.
message SystemEventReactionsConfigurationRequest {
    // The workstation information.
    WorkstationInformation workstationInfo = 1;
    // The type of configuration operation: save or delete.
    EventsReactionConfigOper eventsReactionConfigOper = 2;
    // The list of equipment event reactions to process.
    repeated SystemEventReaction systemEventReactions = 3;
}

//
// The equipment event reactions configuration request response.
message EquipmentEventReactionsConfigurationResponse {
    // Global reply for the request. If this is OK, then ALL requests were successful. 
    Response response = 1;
    // The list of equipment event reactions which were not correctly configured. The ones that went well are absent from this list.
    repeated EquipmentEventReactionResponse equipmentEventReactionsResponses = 2;
}

//
// The system event reactions configuration request response.
message SystemEventReactionConfigurationResponse {
    // Global reply for the request. If this is OK, then ALL requests were successful. 
    Response response = 1;
    // The system event reaction which was not correctly configured.
    SystemEventReaction systemEventReaction = 2;
}

//
// The system event reactions configuration request response.
message SystemEventReactionsConfigurationResponse {
    // Global reply for the request. If this is OK, then ALL requests were successful. 
    Response response = 1;
    // The list of system event reactions which were not correctly configured. The ones that went well are absent from this list.
    repeated SystemEventReactionResponse systemEventReactionsResponses = 2;
}

//
// The timer scheduled event reaction data.
message TimerScheduledEventReaction {
    //
    google.protobuf.Int64Value id = 1;
    //
    google.protobuf.StringValue description = 2;
    //
    google.protobuf.BoolValue enabled = 3;
    //
    google.protobuf.Int64Value day = 4;
    //
    google.protobuf.Int64Value month = 5;
    //
    google.protobuf.Int64Value year = 6;
    //
    google.protobuf.Int64Value hour = 7;
    //
    google.protobuf.Int64Value minute = 8;
    //
    TimerScheduledEventPeriodicityType timerScheduledEventPeriodicityType = 9;
    //
    google.protobuf.Int64Value macroId = 10;
}

//
// The message used to return all timer scheduled event reactions.
message TimerScheduledEventReactionResponse {
    // Global reply for the request. If this is OK, then ALL requests were successful. 
    Response response = 1;
    // The timer scheduled event reactions.
    TimerScheduledEventReaction timerScheduledEventReaction = 2;
}

//
// The message used to return all timer scheduled event reactions.
message TimerScheduledEventReactionsResponse {
    // Global reply for the request. If this is OK, then ALL requests were successful. 
    Response response = 1;
    // The list of timer scheduled event reactions.
    repeated TimerScheduledEventReaction timerScheduledEventReactions = 2;
}

//
// The timer scheduled event reactions configuration request.
// If it's a save and the TimerScheduledEventReaction.id is an invalid one, 
// it means it's an addition; otherwise it will be treated as an edition.
message TimerScheduledEventReactionsConfigurationRequest {
    // The workstation information.
    WorkstationInformation workstationInfo = 1;
    // The type of configuration operation: save or delete.
    EventsReactionConfigOper eventsReactionConfigOper = 2;
    // The list of timer scheduled event reactions to process.
    repeated TimerScheduledEventReaction timerScheduledEventReactions = 3;
}

//
// The timer scheduled event reactions configuration request response.
message TimerScheduledEventReactionsConfigurationResponse {
    // Global reply for the request. If this is OK, then ALL requests were successful. 
    Response response = 1;
    // The list of timer scheduled event reactions which were not correctly configured. The ones that went well are absent from this list.
    repeated TimerScheduledEventReactionResponse timerScheduledEventReactionsResponses = 2;
}




