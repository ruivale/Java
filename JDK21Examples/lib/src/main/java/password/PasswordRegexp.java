/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package password;

import java.util.regex.Matcher;
import java.util.regex.Pattern;


/**
 * Regular Expression-based Password Validation
 *  Regular expressions, or regex, are useful tools in Java that allow searching, matching, and transforming strings based on certain patterns. In the same context, regex adopts a more static approach for password validation that operates with the help of predefined regular expressions.
 * 
 *  The following Java regular expression encapsulates the specified requirements:
 *    ^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@#$%^&+=]).{8,}$
 * 
 *  Breaking down its components:
 *    ^: indicates the stringâ€™s beginning
 *    (?=.*[a-z]): makes sure that there is at least one small letter
 *    (?=.*[A-Z]): needs at least one capital letter
 *    (?=.*\\d): requires at least one digit
 *    (?=.*[@#$%^&+=]): provides a guarantee of at least one special symbol
 *    .{8,20}: imposes the minimum length of 8 characters and the maximum length of 20 characters
 *    $: terminates the string
 * 
 * 
 * link: https://www.baeldung.com/java-regex-password-validation
 * 
 * @author 2334
 */
public class PasswordRegexp {
  /* */
  private static String regExpn = "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=])(?=\\S+$).{8,20}$";
  
  /**
   * 
   * @param charPasswords
   * @return 
   */
  public boolean checkForValidPassword(final char[] charPasswords) {
      final Pattern pattern = Pattern.compile(regExpn, Pattern.CASE_INSENSITIVE);
      final Matcher matcher = pattern.matcher(String.copyValueOf(charPasswords));

      return matcher.matches();
  }  
  
  
  public static void main(String[] args) {
    PasswordRegexp pr = new PasswordRegexp();
  }
}
